<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".generated.cs" #><#
    var inputErrors = new ErrorDescriptor[]
    {
        new ErrorDescriptor("TagParseExpectedCommitError", "Parse error while parsing tag: expected 'commit'"),
        new ErrorDescriptor("TagParseExpectedNameError", "Parse error while parsing tag: expected 'name'"),
        new ErrorDescriptor("TagParseExpectedTaggerError", "Parse error while parsing tag: expected 'tagger'"),
        new ErrorDescriptor("TagParseExpectedDateError", "Parse error while parsing tag: expected 'date'"),
        new ErrorDescriptor("TagParseBadDateFormatError", "Parse error while parsing tag: bad date format"),
        new ErrorDescriptor("TagParseExpectedBlankLineError", "Parse error while parsing tag: expected blank line"),
        new ErrorDescriptor("CommitParseExpectedTreeError", "Parse error while parsing commit: expected 'tree'"),
        new ErrorDescriptor("CommitParseExpectedCommitterError", "Parse error while parsing commit: expected 'committer'"),
        new ErrorDescriptor("CommitParseExpectedDateError", "Parse error while parsing commit: expected 'date'"),
        new ErrorDescriptor("CommitParseBadDateFormatError", "Parse error while parsing tag: bad date format"),
        new ErrorDescriptor("CommitParseExpectedBlankLineError", "Parse error while parsing commit: expected blank line"),
    };

    var semanticErrors = new ErrorDescriptor[]
    {
        new ErrorDescriptor("TagNameDoesNotExistError", "A tag with tag name '{0}' does not exist", new ParameterDescriptor("tagName", "TagName")),
        new ErrorDescriptor("RefNameDoesNotExistError", "A ref with ref name '{0}' does not exist", new ParameterDescriptor("refName", "RefName")),
        new ErrorDescriptor("CommitIDRecordDoesNotExistError", "A commit with CommitID {0} does not exist", new ParameterDescriptor("commitID", "CommitID")),
        new ErrorDescriptor("TagIDRecordDoesNotExistError", "A tag with TagID {0} does not exist", new ParameterDescriptor("tagID", "TagID")),
        new ErrorDescriptor("TreeIDRecordDoesNotExistError", "A tree with TreeID {0} does not exist", new ParameterDescriptor("treeID", "TreeID")),
        new ErrorDescriptor("BlobIDRecordDoesNotExistError", "A blob with BlobID {0} does not exist", new ParameterDescriptor("blobID", "BlobID")),

        new ErrorDescriptor("TreeTreePathDoesNotExistError", "A tree with path '{0}' does not exist", new ParameterDescriptor("path", "TreeTreePath")),

        new ErrorDescriptor("TagNameAlreadyExistsError", "A tag with tag name '{0}' already exists", new ParameterDescriptor("tagName", "TagName")),
        new ErrorDescriptor("BlobNotFoundByPathError", "A blob was not found given path '{0}'", new ParameterDescriptor("path", "TreeBlobPath")),

        new ErrorDescriptor("ComputedTagIDMismatchError", "Computed TagID {0} does not match expected TagID {1}", new ParameterDescriptor("computedID", "TagID"), new ParameterDescriptor("expectedID", "TagID")),
        new ErrorDescriptor("ComputedCommitIDMismatchError", "Computed CommitID {0} does not match expected CommitID {1}", new ParameterDescriptor("computedID", "CommitID"), new ParameterDescriptor("expectedID", "CommitID")),
        new ErrorDescriptor("ComputedTreeIDMismatchError", "Computed TreeID {0} does not match expected TreeID {1}", new ParameterDescriptor("computedID", "TreeID"), new ParameterDescriptor("expectedID", "TreeID")),
        new ErrorDescriptor("ComputedBlobIDMismatchError", "Computed BlobID {0} does not match expected BlobID {1}", new ParameterDescriptor("computedID", "BlobID"), new ParameterDescriptor("expectedID", "BlobID")),

        new ErrorDescriptor("TagNameDoesNotMatchExpectedError", "Retrieved tag name '{0}' does not match expected tag name '{1}'", new ParameterDescriptor("retrievedName", "TagName"), new ParameterDescriptor("expectedName", "TagName")),
    };
#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using IVO.Definition.Models;

namespace IVO.Definition.Errors
{
<#
    bool writtenFirst = false;
    for (int i = 0; i < inputErrors.Length; ++i)
    {
        var ty = inputErrors[i];
        if (!writtenFirst)
        {
            writtenFirst = true;
        }
        else
        {
#>

<#
        }
#>
    public sealed partial class <#= ty.Name #> : InputError
    {
<#
        if (ty.DefaultMessage != null)
        {
#>
        public <#= ty.Name #>(<#= String.Join(", ", ty.Parameters.Select(p => p.Type + " " + p.Name)) #>) : base("<#= ty.DefaultMessage #>"<#= (ty.Parameters.Length > 0 ? ", " : String.Empty) + String.Join(", ", ty.Parameters.Select(p => p.Name)) #>) { }
<#
        } // if (ty.DefaultMessage != null)
        else
        {
#>
        public <#= ty.Name #>(string message) : base(message) { }
        public <#= ty.Name #>(string format, params object[] args) : base(format, args) { }
<#
        } // if (ty.DefaultMessage != null) else
#>
    }
<#
    } // for (int i = 0; i < semanticErrors.Length; ++i)
#>
<#
    for (int i = 0; i < semanticErrors.Length; ++i)
    {
        var ty = semanticErrors[i];
        if (!writtenFirst)
        {
            writtenFirst = true;
        }
        else
        {
#>

<#
        }
#>
    public sealed partial class <#= ty.Name #> : SemanticError
    {
<#
        if (ty.DefaultMessage != null)
        {
#>
        public <#= ty.Name #>(<#= String.Join(", ", ty.Parameters.Select(p => p.Type + " " + p.Name)) #>) : base("<#= ty.DefaultMessage #>"<#= (ty.Parameters.Length > 0 ? ", " : String.Empty) + String.Join(", ", ty.Parameters.Select(p => p.Name)) #>) { }
<#
        } // if (ty.DefaultMessage != null)
        else
        {
#>
        public <#= ty.Name #>(string message) : base(message) { }
        public <#= ty.Name #>(string format, params object[] args) : base(format, args) { }
<#
        } // if (ty.DefaultMessage != null) else
#>
    }
<#
    } // for (int i = 0; i < semanticErrors.Length; ++i)
#>
}<#+
    private sealed class ErrorDescriptor
    {
        public ErrorDescriptor(string name, string defaultMessage = null, params ParameterDescriptor[] parameters)
        {
            this.Name = name;
            this.DefaultMessage = defaultMessage;
            this.Parameters = parameters;
        }

        public string Name { get; private set; }
        public string DefaultMessage { get; private set; }
        public ParameterDescriptor[] Parameters { get; private set; }
    }
    private sealed class ParameterDescriptor
    {
        public ParameterDescriptor(string name, string type)
        {
            this.Name = name;
            this.Type = type;
        }

        public string Name { get; private set; }
        public string Type { get; private set; }
    }
#>