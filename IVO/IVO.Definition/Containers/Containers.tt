<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".generated.cs" #><#
    var containers = new[]
    {
        new { objType = "Blob",     idType = "BlobID" },
        new { objType = "Tree",     idType = "TreeID" },
        new { objType = "ICommit",  idType = "CommitID" },
    };
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using IVO.Definition.Models;

namespace IVO.Definition.Containers
{
<#
    for (int i = 0; i < containers.Length; ++i)
    {
        var c = containers[i];
        if (i != 0)
        {
#>

<#
        }
#>
    public sealed class <#= c.objType #>Container
    {
        private Dictionary<<#= c.idType #>, <#= c.objType #>> _container;

        public <#= c.objType #>Container(params <#= c.objType #>[] items)
        {
            _container = items.ToDictionary(e => e.ID);
        }

        public <#= c.objType #>Container(IEnumerable<<#= c.objType #>> items)
        {
            _container = items.ToDictionary(e => e.ID);
        }

        public <#= c.objType #>Container(IDictionary<<#= c.idType #>, <#= c.objType #>> items)
        {
            _container = new Dictionary<<#= c.idType #>, <#= c.objType #>>(items);
        }

        public <#= c.objType #> this[<#= c.idType #> id]
        {
            get { return _container[id]; }
        }

        public bool ContainsKey(<#= c.idType #> id)
        {
            return _container.ContainsKey(id);
        }

        public bool TryGetValue(<#= c.idType #> id, out <#= c.objType #> value)
        {
            return _container.TryGetValue(id, out value);
        }

        public Maybe<<#= c.objType #>> MaybeGet(<#= c.idType #> id)
        {
            <#= c.objType #> value;
            
            if (_container.TryGetValue(id, out value))
                return new Maybe<<#= c.objType #>>(value);

            return Maybe<<#= c.objType #>>.Nothing;
        }

        public int Count { get { return _container.Count; } }

        public IEnumerable<<#= c.idType #>> Keys { get { return _container.Keys; } }

        public IEnumerable<<#= c.objType #>> Values { get { return _container.Values; } }
    }
<#
    } // for (int i = 0; i < containers.Length; ++i)
#>
}
